// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testVueFile compatible 1`] = `
"import MyComponent from \\"my-component.vue\\";
import {
  computed,
  PropType,
  reactive,
  toRefs,
  ref,
  provide,
  inject,
  onBeforeUnmount,
  onUnmounted,
  defineComponent,
} from \\"@vue/composition-api\\";
import { useStore } from \\"vuex\\";
const symbol = Symbol(\\"baz\\");
/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: \\"checked\\",
    event: \\"change\\",
  },
  props: {
    bar: null,
    qaq: null,
    cac: null,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false },
    bar: { type: Number as PropType<number>, default: 1 },
    foobar: { type: Object as PropType<CustomType> },
  },
  name: \\"oao\\",
  setup(props, context) {
    const store = useStore();
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% of cases.*/ context
        .root.$store.state.count;
    });
    const { a } = (() => {
      const a = \\"pa\\";
      return toRefs(
        reactive({
          a: a,
        })
      );
    })();
    const anotherComponent = ref<HTMLElement>(null);
    provide(\\"foa\\", \\"foo\\");
    provide(\\"bar\\", \\"bar\\");
    const foai = inject<string>(\\"foai\\");
    const bari = inject<string>(\\"bar\\");
    const optional = inject<string>(\\"optional\\", \\"default\\");
    const bazi = inject<string>(symbol);
    /* TODO: check function dispatch call signature is correct*/ const actA =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(\\"actA\\", arg);
      };
    // hmm all actions are promises.
    const actB = async (str: string): Promise<number> => {
      return await store.dispatch(\\"actB\\", str);
    };
    const actC = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(\\"actC\\", val);
    };
    /* TODO: check function dispatch call signature is correct*/ const actD =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(\\"namespace/actD\\", arg);
      };
    const actE = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(\\"namespace/actE\\", val);
    };
    /* TODO: check function dispatch call signature is correct*/ const actionEff =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(actF, arg);
      };
    const actuhGee = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(actG, val);
    };
    const getA = computed(() => {
      return store.getters.getA;
    });
    const getB = computed<number>(() => {
      return store.getters.getB;
    });
    const getC = computed<(str: string) => number>(() => {
      return store.getters.getC;
    });
    const getTheC = computed(() => {
      return store.getters[\\"namespace/getC\\"];
    });
    const getTheD = computed<number>(() => {
      return store.getters[\\"namespace/getD\\"];
    });
    const getTheE = computed(() => {
      return store.getters.cGetE;
    });
    const getTheG = computed<number>(() => {
      return store.getters.cGetG;
    });
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myDiv =
      ref<HTMLDivElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const mySpan =
      ref(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myComponent =
      ref<MyComponent>(null);
    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.'); //foo
    onBeforeUnmount(() => {
      context.emit(\\"Tearing down\\");
    });
    onUnmounted(() => {
      console.log(\\"destroyed\\");
    });
    const refAccess = () => {
      const foo = { myDiv: true };
      foo.myDiv = false; // should not transform
      myDiv.value!.focus();
      mySpan.value!.innerText = \\"foo\\";
      myComponent.value!.vm.doSomething();
    };
    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value);
      console.log(actB(\\"foo\\"));
      console.log(getC.value(\\"bar\\"));
    };
    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      foai,
      bari,
      optional,
      bazi,
      actA,
      actB,
      actC,
      actD,
      actE,
      actionEff,
      actuhGee,
      getA,
      getB,
      getC,
      getTheC,
      getTheD,
      getTheE,
      getTheG,
      myDiv,
      mySpan,
      myComponent,
      msg,
      onBeforeUnmount,
      onUnmounted,
      refAccess,
      hello,
    };
  },
});
"
`;

exports[`testVueFile no compatible 1`] = `
"import MyComponent from \\"my-component.vue\\";
import {
  defineComponent,
  computed,
  PropType,
  reactive,
  toRefs,
  ref,
  provide,
  inject,
  onBeforeUnmount,
  onUnmounted,
} from \\"vue\\";
import { useStore } from \\"vuex\\";
const symbol = Symbol(\\"baz\\");
/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: \\"checked\\",
    event: \\"change\\",
  },
  props: {
    bar: null,
    qaq: null,
    cac: null,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false },
    bar: { type: Number as PropType<number>, default: 1 },
    foobar: { type: Object as PropType<CustomType> },
  },
  name: \\"oao\\",
  setup(props, context) {
    const store = useStore();
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% of cases.*/ context
        .root.$store.state.count;
    });
    const { a } = (() => {
      const a = \\"pa\\";
      return toRefs(
        reactive({
          a: a,
        })
      );
    })();
    const anotherComponent = ref<HTMLElement>(null);
    provide(\\"foa\\", \\"foo\\");
    provide(\\"bar\\", \\"bar\\");
    const foai = inject<string>(\\"foai\\");
    const bari = inject<string>(\\"bar\\");
    const optional = inject<string>(\\"optional\\", \\"default\\");
    const bazi = inject<string>(symbol);
    /* TODO: check function dispatch call signature is correct*/ const actA =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(\\"actA\\", arg);
      };
    // hmm all actions are promises.
    const actB = async (str: string): Promise<number> => {
      return await store.dispatch(\\"actB\\", str);
    };
    const actC = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(\\"actC\\", val);
    };
    /* TODO: check function dispatch call signature is correct*/ const actD =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(\\"namespace/actD\\", arg);
      };
    const actE = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(\\"namespace/actE\\", val);
    };
    /* TODO: check function dispatch call signature is correct*/ const actionEff =
      async (arg: unknown): Promise<unknown> => {
        return await store.dispatch(actF, arg);
      };
    const actuhGee = async (val: \\"foo\\" | \\"bar\\"): Promise<number> => {
      return await store.dispatch(actG, val);
    };
    const getA = computed(() => {
      return store.getters.getA;
    });
    const getB = computed<number>(() => {
      return store.getters.getB;
    });
    const getC = computed<(str: string) => number>(() => {
      return store.getters.getC;
    });
    const getTheC = computed(() => {
      return store.getters[\\"namespace/getC\\"];
    });
    const getTheD = computed<number>(() => {
      return store.getters[\\"namespace/getD\\"];
    });
    const getTheE = computed(() => {
      return store.getters.cGetE;
    });
    const getTheG = computed<number>(() => {
      return store.getters.cGetG;
    });
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myDiv =
      ref<HTMLDivElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const mySpan =
      ref(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myComponent =
      ref<MyComponent>(null);
    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.'); //foo
    onBeforeUnmount(() => {
      context.emit(\\"Tearing down\\");
    });
    onUnmounted(() => {
      console.log(\\"destroyed\\");
    });
    const refAccess = () => {
      const foo = { myDiv: true };
      foo.myDiv = false; // should not transform
      myDiv.value!.focus();
      mySpan.value!.innerText = \\"foo\\";
      myComponent.value!.vm.doSomething();
    };
    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value);
      console.log(actB(\\"foo\\"));
      console.log(getC.value(\\"bar\\"));
    };
    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      foai,
      bari,
      optional,
      bazi,
      actA,
      actB,
      actC,
      actD,
      actE,
      actionEff,
      actuhGee,
      getA,
      getB,
      getC,
      getTheC,
      getTheD,
      getTheE,
      getTheG,
      myDiv,
      mySpan,
      myComponent,
      msg,
      onBeforeUnmount,
      onUnmounted,
      refAccess,
      hello,
    };
  },
});
"
`;
