// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testTSFile compatible 1`] = `
"import {
  defineComponent,
  computed,
  PropType,
  reactive,
  toRefs,
  ref,
  onBeforeUnmount,
  onUnmounted,
  watch,
  onMounted,
} from \\"@vue/composition-api\\";
/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: \\"checked\\",
    event: \\"change\\",
  },
  props: {
    bar: String,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false },
    bar: { type: Number as PropType<number>, default: 1 },
    foobar: { type: Object as PropType<CustomType> },
  },
  name: \\"oao\\",
  setup(props, context) {
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% of cases.*/ context
        .root.$store.state.count;
    });
    const { a } = (() => {
      const a = \\"pa\\";
      return toRefs(
        reactive({
          a: a,
        })
      );
    })();
    const anotherComponent = ref<HTMLElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myDiv =
      ref<HTMLDivElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const mySpan =
      ref(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myComponent =
      ref<MyComponent>(null);
    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.'); // foo
    const onMsgChanged = (val: string, newVal: string) => {
      console.log(val, newVal);
    };
    onBeforeUnmount(() => {
      context.emit(\\"tearing down\\");
    });
    onUnmounted(() => {
      console.log(\\"destroyed\\");
    });
    const click = (c: string) => {
      context.emit(\\"click\\", c);
    };
    const refAccess = () => {
      const foo = { myDiv: true };
      foo.myDiv = false; // should not transform
      myDiv.value!.focus();
      mySpan.value!.innerText = \\"foo\\";
      myComponent.value!.vm.doSomething();
    };
    const value = computed({
      get: () => {
        return props.checked;
      },
      set: (value: boolean) => {
        context.emit(\\"change\\", value);
      },
    });
    watch(
      props.checked,
      (val: boolean, newVal: boolean) => {
        console.log(val, newVal);
        console.log(anotherComponent.value!);
      },
      { deep: true, immediate: true }
    );
    onMounted(() => {
      click(\\"oao\\");
    });
    const removeItem = () => {
      if (props.foo > 10) {
        context.emit(\\"remove-item\\", 10);
      } else {
        context.emit(\\"remove-item\\", props.foo);
      }
    };
    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value);
    };
    removeItem();
    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      myDiv,
      mySpan,
      myComponent,
      msg,
      onMsgChanged,
      onBeforeUnmount,
      onUnmounted,
      click,
      refAccess,
      value,
      checked,
      onMounted,
      removeItem,
      hello,
    };
  },
});
"
`;

exports[`testTSFile compatible and ts config file: stderr 1`] = `""`;

exports[`testTSFile compatible and ts config file: stdout 1`] = `
"import {
  defineComponent,
  computed,
  PropType,
  reactive,
  toRefs,
  ref,
  onBeforeUnmount,
  onUnmounted,
  watch,
  onMounted,
} from \\"@vue/composition-api\\";
/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: \\"checked\\",
    event: \\"change\\",
  },
  props: {
    bar: String,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false },
    bar: { type: Number as PropType<number>, default: 1 },
    foobar: { type: Object as PropType<CustomType> },
  },
  name: \\"oao\\",
  setup(props, ctx) {
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% of cases.*/ ctx
        .root.$store.state.count;
    });
    const { a } = (() => {
      const a = \\"pa\\";
      return toRefs(
        reactive({
          a: a,
        })
      );
    })();
    const anotherComponent = ref<HTMLElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myDiv =
      ref<HTMLDivElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const mySpan =
      ref(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myComponent =
      ref<MyComponent>(null);
    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.'); // foo
    const onMsgChanged = (val: string, newVal: string) => {
      console.log(val, newVal);
    };
    onBeforeUnmount(() => {
      ctx.emit(\\"tearing down\\");
    });
    onUnmounted(() => {
      console.log(\\"destroyed\\");
    });
    const click = (c: string) => {
      context.emit(\\"click\\", c);
    };
    const refAccess = () => {
      const foo = { myDiv: true };
      foo.myDiv = false; // should not transform
      myDiv.value!.focus();
      mySpan.value!.innerText = \\"foo\\";
      myComponent.value!.vm.doSomething();
    };
    const value = computed({
      get: () => {
        return props.checked;
      },
      set: (value: boolean) => {
        ctx.emit(\\"change\\", value);
      },
    });
    watch(
      props.checked,
      (val: boolean, newVal: boolean) => {
        console.log(val, newVal);
        console.log(anotherComponent.value!);
      },
      { deep: true, immediate: true }
    );
    onMounted(() => {
      click(\\"oao\\");
    });
    const removeItem = () => {
      if (props.foo > 10) {
        context.emit(\\"remove-item\\", 10);
      } else {
        context.emit(\\"remove-item\\", props.foo);
      }
    };
    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value);
    };
    removeItem();
    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      myDiv,
      mySpan,
      myComponent,
      msg,
      onMsgChanged,
      onBeforeUnmount,
      onUnmounted,
      click,
      refAccess,
      value,
      checked,
      onMounted,
      removeItem,
      hello,
    };
  },
});

"
`;

exports[`testTSFile no compatible 1`] = `
"import {
  defineComponent,
  computed,
  PropType,
  reactive,
  toRefs,
  ref,
  onBeforeUnmount,
  onUnmounted,
  watch,
  onMounted,
} from \\"vue\\";
/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: \\"checked\\",
    event: \\"change\\",
  },
  props: {
    bar: String,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false },
    bar: { type: Number as PropType<number>, default: 1 },
    foobar: { type: Object as PropType<CustomType> },
  },
  name: \\"oao\\",
  setup(props, context) {
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% of cases.*/ context
        .root.$store.state.count;
    });
    const { a } = (() => {
      const a = \\"pa\\";
      return toRefs(
        reactive({
          a: a,
        })
      );
    })();
    const anotherComponent = ref<HTMLElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myDiv =
      ref<HTMLDivElement>(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const mySpan =
      ref(null);
    /* TODO: Check for potential naming collisions from $refs conversion*/ const myComponent =
      ref<MyComponent>(null);
    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.'); // foo
    const onMsgChanged = (val: string, newVal: string) => {
      console.log(val, newVal);
    };
    onBeforeUnmount(() => {
      context.emit(\\"tearing down\\");
    });
    onUnmounted(() => {
      console.log(\\"destroyed\\");
    });
    const click = (c: string) => {
      context.emit(\\"click\\", c);
    };
    const refAccess = () => {
      const foo = { myDiv: true };
      foo.myDiv = false; // should not transform
      myDiv.value!.focus();
      mySpan.value!.innerText = \\"foo\\";
      myComponent.value!.vm.doSomething();
    };
    const value = computed({
      get: () => {
        return props.checked;
      },
      set: (value: boolean) => {
        context.emit(\\"change\\", value);
      },
    });
    watch(
      props.checked,
      (val: boolean, newVal: boolean) => {
        console.log(val, newVal);
        console.log(anotherComponent.value!);
      },
      { deep: true, immediate: true }
    );
    onMounted(() => {
      click(\\"oao\\");
    });
    const removeItem = () => {
      if (props.foo > 10) {
        context.emit(\\"remove-item\\", 10);
      } else {
        context.emit(\\"remove-item\\", props.foo);
      }
    };
    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value);
    };
    removeItem();
    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      myDiv,
      mySpan,
      myComponent,
      msg,
      onMsgChanged,
      onBeforeUnmount,
      onUnmounted,
      click,
      refAccess,
      value,
      checked,
      onMounted,
      removeItem,
      hello,
    };
  },
});
"
`;
